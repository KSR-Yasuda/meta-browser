From e79171e62fc272a4ef18a11818c2f77590dfbef4 Mon Sep 17 00:00:00 2001
From: Takuro Ashie <ashie@clear-code.com>
Date: Tue, 24 Oct 2017 14:13:06 +0900
Subject: [PATCH] Wayland: Fix a crash which causes when there is no keyboard

Signed-off-by: Takuro Ashie <ashie@clear-code.com>
---
 widget/gtk/nsClipboardWayland.cpp | 43 ++++++++++++++++++++++++---------------
 widget/gtk/nsClipboardWayland.h   |  1 +
 2 files changed, 28 insertions(+), 16 deletions(-)

diff --git a/widget/gtk/nsClipboardWayland.cpp b/widget/gtk/nsClipboardWayland.cpp
index 30bec84..d96faf8 100644
--- a/widget/gtk/nsClipboardWayland.cpp
+++ b/widget/gtk/nsClipboardWayland.cpp
@@ -240,7 +240,7 @@ nsRetrievalContextWayland::ConfigureKeyboard(wl_seat_capability caps)
   if (caps & WL_SEAT_CAPABILITY_KEYBOARD) {
       mKeyboard = wl_seat_get_keyboard(mSeat);
       wl_keyboard_add_listener(mKeyboard, &keyboard_listener, this);
-  } else if (!(caps & WL_SEAT_CAPABILITY_KEYBOARD)) {
+  } else if (mKeyboard) {
       wl_keyboard_destroy(mKeyboard);
       mKeyboard = nullptr;
   }
@@ -267,6 +267,7 @@ nsRetrievalContextWayland::InitDataDeviceManager(wl_registry *registry,
   int data_device_manager_version = MIN (version, 3);
   mDataDeviceManager = (wl_data_device_manager *)wl_registry_bind(registry, id,
       &wl_data_device_manager_interface, data_device_manager_version);
+  InitDataDeviceListener();
 }
 
 void nsRetrievalContextWayland::InitSeat(wl_registry *registry,
@@ -275,6 +276,7 @@ void nsRetrievalContextWayland::InitSeat(wl_registry *registry,
 {
   mSeat = (wl_seat*)wl_registry_bind(registry, id, &wl_seat_interface, 1);
   wl_seat_add_listener(mSeat, &seat_listener, data);
+  InitDataDeviceListener();
 }
 
 static void
@@ -306,22 +308,11 @@ static const struct wl_registry_listener clipboard_registry_listener = {
     gdk_registry_handle_global_remove
 };
 
-nsRetrievalContextWayland::nsRetrievalContextWayland(void)
-  : mInitialized(false),
-    mDataDeviceManager(nullptr),
-    mDataOffer(nullptr)
+void
+nsRetrievalContextWayland::InitDataDeviceListener(void)
 {
-    const gchar* charset;
-    g_get_charset(&charset);
-    mTextPlainLocale = g_strdup_printf("text/plain;charset=%s", charset);
-
-    mDisplay = gdk_wayland_display_get_wl_display(gdk_display_get_default());
-    wl_registry_add_listener(wl_display_get_registry(mDisplay),
-                             &clipboard_registry_listener, this);
-    wl_display_roundtrip(mDisplay);
-    wl_display_roundtrip(mDisplay);
-
-    // We don't have Wayland support here so just give up
+    if (mInitialized)
+        return;
     if (!mDataDeviceManager || !mSeat)
         return;
 
@@ -337,6 +328,26 @@ nsRetrievalContextWayland::nsRetrievalContextWayland(void)
     mInitialized = true;
 }
 
+nsRetrievalContextWayland::nsRetrievalContextWayland(void)
+  : mInitialized(false),
+    mDisplay(nullptr),
+    mSeat(nullptr),
+    mDataDeviceManager(nullptr),
+    mDataOffer(nullptr),
+    mKeyboard(nullptr),
+    mTextPlainLocale(nullptr)
+{
+    const gchar* charset;
+    g_get_charset(&charset);
+    mTextPlainLocale = g_strdup_printf("text/plain;charset=%s", charset);
+
+    mDisplay = gdk_wayland_display_get_wl_display(gdk_display_get_default());
+    wl_registry_add_listener(wl_display_get_registry(mDisplay),
+                             &clipboard_registry_listener, this);
+    wl_display_roundtrip(mDisplay);
+    wl_display_roundtrip(mDisplay);
+}
+
 nsRetrievalContextWayland::~nsRetrievalContextWayland(void)
 {
     g_free(mTextPlainLocale);
diff --git a/widget/gtk/nsClipboardWayland.h b/widget/gtk/nsClipboardWayland.h
index 0feede8..7c511da 100644
--- a/widget/gtk/nsClipboardWayland.h
+++ b/widget/gtk/nsClipboardWayland.h
@@ -37,6 +37,7 @@ public:
 
     void InitDataDeviceManager(wl_registry *registry, uint32_t id, uint32_t version);
     void InitSeat(wl_registry *registry, uint32_t id, uint32_t version, void *data);
+    void InitDataDeviceListener(void);
 private:
     virtual ~nsRetrievalContextWayland() override;
 
-- 
1.9.1

