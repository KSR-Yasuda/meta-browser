commit 444e2f68eb35b4fa97f2e4ad40beb87eb40981c8
Author: Takuro Ashie <ashie@clear-code.com>
Date:   Tue Oct 10 18:00:36 2017 +0900

    Don't show the window frames
    
    The current EGL patch for Wayland doesn't work well when the
    window frame exist. Until the issue is resolved, don't show
    the frame and make the window fullscreen by default.
    
    Signed-off-by: Takuro Ashie <ashie@clear-code.com>

diff --git a/browser/app/profile/firefox.js b/browser/app/profile/firefox.js
index 026283bbe9e1..03453b75498e 100644
--- a/browser/app/profile/firefox.js
+++ b/browser/app/profile/firefox.js
@@ -244,7 +244,7 @@ pref("browser.warnOnQuit", true);
 // might still show the window closing dialog with showQuitWarning == false.
 pref("browser.showQuitWarning", false);
 pref("browser.fullscreen.autohide", true);
-pref("browser.fullscreen.animate", true);
+pref("browser.fullscreen.animate", false);
 pref("browser.overlink-delay", 80);
 
 #ifdef UNIX_BUT_NOT_MAC
diff --git a/browser/base/content/browser-fullScreenAndPointerLock.js b/browser/base/content/browser-fullScreenAndPointerLock.js
index 497e51121182..fd827becd970 100644
--- a/browser/base/content/browser-fullScreenAndPointerLock.js
+++ b/browser/base/content/browser-fullScreenAndPointerLock.js
@@ -266,8 +266,8 @@ var FullScreen = {
       window.messageManager.addMessageListener(type, this);
     }
 
-    if (window.fullScreen)
-      this.toggle();
+    window.fullScreen = true;
+    this.toggle();
   },
 
   uninit: function() {
diff --git a/browser/base/content/browser-sets.inc b/browser/base/content/browser-sets.inc
index fc5bfeb7eb01..50c7bacb27d6 100644
--- a/browser/base/content/browser-sets.inc
+++ b/browser/base/content/browser-sets.inc
@@ -277,7 +277,9 @@
 #ifndef XP_MACOSX
     <key id="showAllHistoryKb" key="&showAllHistoryCmd.commandkey;" command="Browser:ShowAllHistory" modifiers="accel,shift"/>
     <key keycode="VK_F5" command="Browser:ReloadSkipCache" modifiers="accel"/>
+<!--
     <key id="key_fullScreen" keycode="VK_F11" command="View:FullScreen"/>
+-->
 #else
     <key id="key_fullScreen" key="&fullScreenCmd.macCommandKey;" command="View:FullScreen" modifiers="accel,control"/>
     <key id="key_fullScreen_old" key="&fullScreenCmd.macCommandKey;" command="View:FullScreen" modifiers="accel,shift"/>
diff --git a/browser/base/content/browser.xul b/browser/base/content/browser.xul
index 2c74aecdf607..fbfe830ed584 100644
--- a/browser/base/content/browser.xul
+++ b/browser/base/content/browser.xul
@@ -57,8 +57,8 @@
         windowtype="navigator:browser"
         macanimationtype="document"
         screenX="4" screenY="4"
-        fullscreenbutton="true"
-        sizemode="normal"
+        fullscreenbutton="false"
+        sizemode="fullscreen"
         retargetdocumentfocus="urlbar"
         persist="screenX screenY width height sizemode">
 
@@ -933,6 +933,7 @@
 
       <hbox id="window-controls" hidden="true" pack="end" skipintoolbarset="true"
             ordinal="1000">
+<!--
         <toolbarbutton id="minimize-button"
                        tooltiptext="&fullScreenMinimize.tooltip;"
                        oncommand="window.minimize();"/>
@@ -945,6 +946,7 @@
 #endif
                        tooltiptext="&fullScreenRestore.tooltip;"
                        oncommand="BrowserFullScreen();"/>
+-->
 
         <toolbarbutton id="close-button"
                        tooltiptext="&fullScreenClose.tooltip;"
@@ -1040,6 +1042,7 @@
                      observes="View:FullScreen"
                      type="checkbox"
                      label="&fullScreenCmd.label;"
+                     disabled="true"
                      tooltip="dynamic-shortcut-tooltip"/>
     </toolbarpalette>
   </toolbox>
diff --git a/browser/components/sessionstore/SessionStore.jsm b/browser/components/sessionstore/SessionStore.jsm
index 2f44b2af3b8a..e279268a6840 100644
--- a/browser/components/sessionstore/SessionStore.jsm
+++ b/browser/components/sessionstore/SessionStore.jsm
@@ -1181,12 +1181,37 @@ var SessionStoreInternal = {
     }
   },
 
+  _detectScreenSize: function() {
+    let [screenWidth, screenHeight] = [{}, {}];
+    Cc["@mozilla.org/gfx/screenmanager;1"].
+      getService(Ci.nsIScreenManager).
+      primaryScreen.
+      GetRectDisplayPix({}, {}, screenWidth, screenHeight);
+
+    // Extending the window beyond a monitor may cause crash, but Gecko on
+    // Wayland doesn't support detecting multi monitors.
+    // So guess it by aspect ratio.
+    let aspectRatio = screenWidth.value / screenHeight.value;
+    if (aspectRatio > 1.3 && aspectRatio < 1.8 && screenWidth.value <= 1920) {
+      // Use the detected screen size to avoid wasted resizing.
+      return { width: screenWidth.value, height: screenHeight.value };
+    } else {
+      // Use fullscreen API instead of resizing manually.
+      return { width: 1, height: 1}
+    }
+  },
+
   /**
    * Called right before a new browser window is shown.
    * @param aWindow
    *        Window reference
    */
   onBeforeBrowserWindowShown: function (aWindow) {
+    var size = this._detectScreenSize();
+    aWindow.moveTo(0, 0);
+    aWindow.resizeTo(size.width, size.height);
+    aWindow.fullScreen = true;
+
     // Register the window.
     this.onLoad(aWindow);
 
diff --git a/widget/gtk/nsWindow.cpp b/widget/gtk/nsWindow.cpp
index a06ae6e355cb..6f1215cbdcfa 100644
--- a/widget/gtk/nsWindow.cpp
+++ b/widget/gtk/nsWindow.cpp
@@ -3901,6 +3901,7 @@ nsWindow::Create(nsIWidget* aParent,
 
         // make sure this is the focus widget in the container
         gtk_widget_show(container);
+        gtk_window_set_decorated(GTK_WINDOW(mShell), FALSE);
         gtk_widget_grab_focus(container);
 
         // the drawing window
