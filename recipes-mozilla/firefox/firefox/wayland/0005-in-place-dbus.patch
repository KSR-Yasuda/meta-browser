From e90a9d6906b703f8e131da4d598dc398b0c4d105 Mon Sep 17 00:00:00 2001
From: Martin Stransky <stransky@redhat.com>
Date: Mon, 24 Apr 2017 17:14:55 +0200
Subject: [PATCH 5/9] in-place dbus

Signed-off-by: Hiroshi Hatake <hatake@clear-code.com>
---
 toolkit/components/remote/DBusRemoteService.cpp  | 124 +-----------------
 toolkit/components/remote/DBusRemoteService.h    |  35 -----
 toolkit/components/remote/nsGTKRemoteService.cpp | 159 ++++++++++++++++++++++-
 toolkit/components/remote/nsGTKRemoteService.h   |  37 ++++--
 4 files changed, 187 insertions(+), 168 deletions(-)

diff --git a/toolkit/components/remote/DBusRemoteService.cpp b/toolkit/components/remote/DBusRemoteService.cpp
index 4a3731a1dfaf..5b3bc0c524de 100644
--- a/toolkit/components/remote/DBusRemoteService.cpp
+++ b/toolkit/components/remote/DBusRemoteService.cpp
@@ -5,6 +5,7 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
+#include "nsXRemoteService.h"
 #include "DBusRemoteService.h"
 
 #include <gtk/gtk.h>
@@ -25,126 +26,3 @@
 #include "mozilla/ipc/DBusMessageRefPtr.h"
 #include "mozilla/ipc/DBusPendingCallRefPtr.h"
 
-#define MOZILLA_TARGET              "org.mozilla"
-#define MOZILLA_REMOTE_OBJECT       "/org/mozilla/Firefox/Remote"
-
-const char* introspect_xml =
-"<!DOCTYPE node PUBLIC \"-//freedesktop//DTD D-BUS Object Introspection 1.0//EN\"\n"
-"\"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd\";>\n"
-"<node>\n"
-"	<interface name=\"org.freedesktop.DBus.Introspectable\">\n"
-"		<method name=\"Introspect\">\n"
-"			<arg name=\"data\" direction=\"out\" type=\"s\"/>\n"
-"		</method>\n"
-"	</interface>\n"
-"	<interface name=\"org.mozilla.firefox\">\n"
-"		<method name=\"Open\">\n"
-"			<arg name=\"url\" direction=\"out\" type=\"s\"/>\n"
-"		</method>\n"
-"	</interface>\n"
-"</node>\n";
-
-static void unregister(DBusConnection *connection, void *user_data)
-{
-}
-
-static DBusHandlerResult introspect(DBusConnection *conn, DBusMessage *msg)
-{
-	DBusMessage *reply;
-
-	reply = dbus_message_new_method_return(msg);
-	if (!reply)
-		return DBUS_HANDLER_RESULT_NEED_MEMORY;
-
-	dbus_message_append_args(reply,
-			DBUS_TYPE_STRING, &introspect_xml,
-			DBUS_TYPE_INVALID);
-
-	dbus_connection_send(conn, reply, NULL);
-	dbus_message_unref(reply);
-
-	return DBUS_HANDLER_RESULT_HANDLED;
-}
-
-static DBusHandlerResult Open(DBusConnection *conn, DBusMessage *msg)
-{
-	DBusMessage *reply;
-
-	reply = dbus_message_new_method_return(msg);
-	if (!reply)
-		return DBUS_HANDLER_RESULT_NEED_MEMORY;
-
-	dbus_message_append_args(reply,
-			DBUS_TYPE_STRING, &introspect_xml,
-			DBUS_TYPE_INVALID);
-
-	dbus_connection_send(conn, reply, NULL);
-	dbus_message_unref(reply);
-
-	return DBUS_HANDLER_RESULT_HANDLED;
-}
-
-static DBusHandlerResult message_handler(DBusConnection *conn,
-				DBusMessage *msg, void *user_data)
-{
-	const char *method = dbus_message_get_member(msg);
-	const char *iface = dbus_message_get_interface(msg);
-
-	if ((strcmp("Introspect", method) == 0) &&
-		 (strcmp("org.freedesktop.DBus.Introspectable", iface) == 0)) {
-		return introspect(conn, msg);
-  }
-
-	if ((strcmp("Open", method) == 0) && 
-    (strcmp("org.mozilla.firefox", iface) == 0)) {
-    return Open(conn, msg);
-	}
-
-	return DBUS_HANDLER_RESULT_NOT_YET_HANDLED;
-}
-
-static DBusObjectPathVTable remoteHandlersTable = {
-	.unregister_function	= unregister,
-	.message_function	= message_handler,
-};
-
-bool
-DBusRemoteService::Connect(const char* aAppName, const char* aProfileName)
-{
-  mConnection = already_AddRefed<DBusConnection>(
-    dbus_bus_get(DBUS_BUS_SESSION, nullptr));
-  if (!mConnection)
-    return NS_ERROR_FAILURE;
-
-  dbus_connection_set_exit_on_disconnect(mConnection, false);
-
-  nsAutoCString interfaceName;
-  interfaceName = nsPrintfCString("org.mozilla.%s.%s", aAppName, aProfileName);
-
-  int ret = dbus_bus_request_name(mConnection, interfaceName.get(),
-                                  DBUS_NAME_FLAG_DO_NOT_QUEUE, nullptr);
-  // The interface is already owned - there is another application/profile
-  // instance already running.
-  if (ret == -1) {
-    dbus_connection_unref(mConnection);
-    mConnection = nullptr;
-    return NS_ERROR_FAILURE;
-  }
-
-  if (!dbus_connection_register_object_path(mConnection, MOZILLA_REMOTE_OBJECT,
-                                            &remoteHandlersTable, nullptr)) {
-    dbus_connection_unref(mConnection);
-    mConnection = nullptr;
-    return NS_ERROR_FAILURE;
-  }
-
-  return NS_OK;
-}
-
-DBusRemoteService::Disconnect()
-{
-  if (mConnection) {
-    dbus_connection_unref(mConnection);
-    mConnection = nullptr;
-  }
-}
diff --git a/toolkit/components/remote/DBusRemoteService.h b/toolkit/components/remote/DBusRemoteService.h
index 8b284f4219f2..e69de29bb2d1 100644
--- a/toolkit/components/remote/DBusRemoteService.h
+++ b/toolkit/components/remote/DBusRemoteService.h
@@ -1,35 +0,0 @@
-/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim:expandtab:shiftwidth=2:tabstop=2:
- */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-#ifndef __DBusRemoteService_h__
-#define __DBusRemoteService_h__
-
-#include "mozilla/Attributes.h"
-
-#ifdef MOZ_ENABLE_DBUS
-#include "mozilla/ipc/DBusConnectionRefPtr.h"
-#endif
-
-class DBusRemoteService
-{
-public:
-  DBusRemoteService()
-#ifdef MOZ_ENABLE_DBUS  
-    : mConnection(nullptr)
-#endif
-    {}
-
-private:
-  bool Connect(const char* aAppName, const char* aProfileName);
-  void Disconnect();
-
-#ifdef MOZ_ENABLE_DBUS
-  RefPtr<DBusConnection> mConnection;
-#endif
-};
-
-#endif // __nsDBusRemoteService_h__
diff --git a/toolkit/components/remote/nsGTKRemoteService.cpp b/toolkit/components/remote/nsGTKRemoteService.cpp
index e7f9914fcf50..92e396d7d3f3 100644
--- a/toolkit/components/remote/nsGTKRemoteService.cpp
+++ b/toolkit/components/remote/nsGTKRemoteService.cpp
@@ -41,9 +41,10 @@ nsGTKRemoteService::Startup(const char* aAppName, const char* aProfileName)
   gtk_widget_realize(mServerWindow);
 
   mIsX11Display = GDK_IS_X11_DISPLAY(gdk_display_get_default());
-#if defined(MOZ_WAYLAND) && defined(MOZ_ENABLE_DBUS)
+#ifdef ENABLE_REMOTE_DBUS
   if (!mIsX11Display) {
-    Connect(aAppName, aProfileName);
+    if (!Connect(aAppName, aProfileName))
+      return NS_ERROR_FAILURE;
   } else
 #endif
   {
@@ -163,6 +164,160 @@ nsGTKRemoteService::HandlePropertyChange(GtkWidget *aWidget,
   return FALSE;
 }
 
+#ifdef ENABLE_REMOTE_DBUS
+
+void nsGTKRemoteService::OpenURL(const char *aCommandLine)
+{
+  
+  
+}
+
+#define MOZILLA_REMOTE_OBJECT       "/org/mozilla/Firefox/Remote"
+
+const char* introspect_xml =
+"<!DOCTYPE node PUBLIC \"-//freedesktop//DTD D-BUS Object Introspection 1.0//EN\"\n"
+"\"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd\";>\n"
+"<node>\n"
+"	<interface name=\"org.freedesktop.DBus.Introspectable\">\n"
+"		<method name=\"Introspect\">\n"
+"			<arg name=\"data\" direction=\"out\" type=\"s\"/>\n"
+"		</method>\n"
+"	</interface>\n"
+"	<interface name=\"org.mozilla.firefox\">\n"
+"		<method name=\"OpenURL\">\n"
+"			<arg name=\"url\" direction=\"in\" type=\"s\"/>\n"
+"		</method>\n"
+"	</interface>\n"
+"</node>\n";
+
+DBusHandlerResult
+nsGTKRemoteService::Introspect(DBusMessage *msg)
+{
+	DBusMessage *reply;
+
+	reply = dbus_message_new_method_return(msg);
+	if (!reply)
+		return DBUS_HANDLER_RESULT_NEED_MEMORY;
+
+	dbus_message_append_args(reply,
+			DBUS_TYPE_STRING, &introspect_xml,
+			DBUS_TYPE_INVALID);
+
+	dbus_connection_send(mConnection, reply, NULL);
+	dbus_message_unref(reply);
+
+	return DBUS_HANDLER_RESULT_HANDLED;
+}
+
+DBusHandlerResult
+nsGTKRemoteService::OpenURL(DBusMessage *msg)
+{
+  DBusMessage *reply = nullptr;
+	const char  *commandLine;
+
+	if (!dbus_message_get_args(msg, nullptr, DBUS_TYPE_STRING, &commandLine,
+				                     DBUS_TYPE_INVALID)) {
+    reply = dbus_message_new_error(msg, "org.mozilla.firefox.Error",
+                                   "Wrong argument");
+	} else {
+    OpenURL(commandLine);
+    reply = dbus_message_new_method_return(msg);
+  }
+  
+  dbus_connection_send(mConnection, reply, NULL);
+	dbus_message_unref(reply);
+
+  return DBUS_HANDLER_RESULT_HANDLED;  
+}
+
+DBusHandlerResult
+nsGTKRemoteService::HandleDBusMessage(DBusConnection *aConnection, DBusMessage *msg)
+{
+  NS_ASSERTION(mConnection == aConnection, "Wrong D-Bus connection.");
+  
+	const char *method = dbus_message_get_member(msg);
+	const char *iface = dbus_message_get_interface(msg);
+
+	if ((strcmp("Introspect", method) == 0) &&
+		 (strcmp("org.freedesktop.DBus.Introspectable", iface) == 0)) {
+		return Introspect(msg);
+  }
+
+	if ((strcmp("OpenURL", method) == 0) && 
+    (strcmp("org.mozilla.firefox", iface) == 0)) {
+    return OpenURL(msg);
+	}
+
+	return DBUS_HANDLER_RESULT_NOT_YET_HANDLED;
+}
+
+void
+nsGTKRemoteService::UnregisterDBusInterface()
+{
+  // Not implemented
+}
+
+static DBusHandlerResult
+message_handler(DBusConnection *conn, DBusMessage *msg, void *user_data)
+{
+  auto interface = static_cast<nsGTKRemoteService*>(user_data);
+	return interface->HandleDBusMessage(conn, msg);
+}
+
+static DBusHandlerResult
+unregister(DBusConnection *conn, DBusMessage *msg, void *user_data)
+{
+  auto interface = static_cast<nsGTKRemoteService*>(user_data);
+	interface->UnregisterDBusInterface();
+}
+
+static DBusObjectPathVTable remoteHandlersTable = {
+	.unregister_function	= unregister,
+	.message_function	= message_handler,
+};
+
+bool
+DBusRemoteService::Connect(const char* aAppName, const char* aProfileName)
+{
+  mConnection = already_AddRefed<DBusConnection>(
+    dbus_bus_get(DBUS_BUS_SESSION, nullptr));
+  if (!mConnection)
+    return false;
+
+  dbus_connection_set_exit_on_disconnect(mConnection, false);
+
+  nsAutoCString interfaceName;
+  interfaceName = nsPrintfCString("org.mozilla.%s.%s", aAppName, aProfileName);
+
+  int ret = dbus_bus_request_name(mConnection, interfaceName.get(),
+                                  DBUS_NAME_FLAG_DO_NOT_QUEUE, nullptr);
+  // The interface is already owned - there is another application/profile
+  // instance already running.
+  if (ret == -1) {
+    dbus_connection_unref(mConnection);
+    mConnection = nullptr;
+    return false;
+  }
+
+  if (!dbus_connection_register_object_path(mConnection, MOZILLA_REMOTE_OBJECT,
+                                            &remoteHandlersTable, this)) {
+    dbus_connection_unref(mConnection);
+    mConnection = nullptr;
+    return false;
+  }
+
+  return true;
+}
+
+void
+DBusRemoteService::Disconnect()
+{
+  if (mConnection) {
+    dbus_connection_unref(mConnection);
+    mConnection = nullptr;
+  }
+}
+#endif
 
 // {C0773E90-5799-4eff-AD03-3EBCD85624AC}
 #define NS_REMOTESERVICE_CID \
diff --git a/toolkit/components/remote/nsGTKRemoteService.h b/toolkit/components/remote/nsGTKRemoteService.h
index 77fdd0088b50..a2061437e8c1 100644
--- a/toolkit/components/remote/nsGTKRemoteService.h
+++ b/toolkit/components/remote/nsGTKRemoteService.h
@@ -8,6 +8,10 @@
 #ifndef __nsGTKRemoteService_h__
 #define __nsGTKRemoteService_h__
 
+#if defined(MOZ_WAYLAND) && defined(MOZ_ENABLE_DBUS)
+#define ENABLE_REMOTE_DBUS 1
+#endif
+
 #include <gdk/gdk.h>
 #include <gdk/gdkx.h>
 #include <gtk/gtk.h>
@@ -15,14 +19,12 @@
 #include "nsInterfaceHashtable.h"
 #include "nsXRemoteService.h"
 #include "mozilla/Attributes.h"
-#if defined(MOZ_WAYLAND) && defined(MOZ_ENABLE_DBUS)
-#include "DBusRemoteService.h"
+#ifdef ENABLE_REMOTE_DBUS
+#include "mozilla/ipc/DBusConnectionRefPtr.h"
 #endif
 
-class nsGTKRemoteService final : public nsXRemoteService,
-#if defined(MOZ_WAYLAND) && defined(MOZ_ENABLE_DBUS)
-                                 public DBusRemoteService
-#endif
+
+class nsGTKRemoteService final : public nsXRemoteService
 {
 public:
   // We will be a static singleton, so don't use the ordinary methods.
@@ -30,8 +32,12 @@ public:
   NS_DECL_NSIREMOTESERVICE
 
 
-  nsGTKRemoteService() :
-    mServerWindow(nullptr) { }
+  nsGTKRemoteService() 
+    : mServerWindow(nullptr)
+#ifdef ENABLE_REMOTE_DBUS
+    , mConnection(nullptr)
+#endif    
+    { }
 
 private:
   ~nsGTKRemoteService() { }
@@ -48,9 +54,24 @@ private:
   virtual void SetDesktopStartupIDOrTimestamp(const nsACString& aDesktopStartupID,
                                               uint32_t aTimestamp) override;
 
+#ifdef ENABLE_REMOTE_DBUS
+  void OpenURL(const char *aCommandLine);
+
+  DBusHandlerResult OpenURL(DBusMessage *msg);
+  DBusHandlerResult Introspect(DBusMessage *msg);
+  DBusHandlerResult HandleDBusMessage(DBusConnection *aConnection, DBusMessage *msg);
+  void UnregisterDBusInterface();
+
+  bool Connect(const char* aAppName, const char* aProfileName);
+  void Disconnect();
+#endif
+
   nsInterfaceHashtable<nsPtrHashKey<GtkWidget>, nsIWeakReference> mWindows;
   GtkWidget* mServerWindow;
   bool       mIsX11Display;
+#ifdef ENABLE_REMOTE_DBUS
+  RefPtr<DBusConnection> mConnection;
+#endif
 };
 
 #endif // __nsGTKRemoteService_h__
-- 
2.11.0

