From 82306f1329cf78247bb22434b9d82ebcaf72677a Mon Sep 17 00:00:00 2001
From: Martin Stransky <stransky@redhat.com>
Date: Fri, 24 Mar 2017 11:02:51 +0100
Subject: [PATCH 09/44] Added wayland lib wrapper

Signed-off-by: Hiroshi Hatake <hatake@clear-code.com>
---
 widget/gtk/WaylandLibWrapper.cpp    | 52 ++++++++++++++++++++++++++++++++
 widget/gtk/WaylandLibWrapper.h      | 60 +++++++++++++++++++++++++++++++++++++
 widget/gtk/WindowSurfaceWayland.cpp |  1 +
 widget/gtk/moz.build                |  1 +
 4 files changed, 114 insertions(+)
 create mode 100644 widget/gtk/WaylandLibWrapper.cpp
 create mode 100644 widget/gtk/WaylandLibWrapper.h

diff --git a/widget/gtk/WaylandLibWrapper.cpp b/widget/gtk/WaylandLibWrapper.cpp
new file mode 100644
index 000000000000..99e169a295d5
--- /dev/null
+++ b/widget/gtk/WaylandLibWrapper.cpp
@@ -0,0 +1,52 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "WaylandLibWrapper.h"
+#include "mozilla/PodOperations.h"
+#include "mozilla/Types.h"
+#include "prlink.h"
+
+struct WaylandLibWrapper MozWaylandWrapper;
+
+WaylandLibWrapper::WaylandLibWrapper()
+{
+  PRLibSpec lspec;
+  lspec.type = PR_LibSpec_Pathname;
+  lspec.value.pathname = "libwayland-client.so.0";
+  mWaylandLib = PR_LoadLibraryWithFlags(lspec, PR_LD_NOW | PR_LD_LOCAL);
+  if (!mWaylandLib) {
+   Unlink();
+   return;
+  }
+
+#define WAY_FUNC(func)                                                    \
+   if (!(func = (decltype(func))PR_FindSymbol(mWaylandLib, "wl_"#func))) {\
+     NS_WARNING("Couldn't load function " # func);                        \
+     Unlink();                                                            \
+     return ;                                                             \
+   }                                                                      \
+
+   WAY_FUNC(registry_interface);
+   WAY_FUNC(surface_interface);
+   WAY_FUNC(subcompositor_interface);
+
+   WAY_FUNC(display_roundtrip_queue);
+   WAY_FUNC(display_roundtrip);
+   WAY_FUNC(proxy_add_listener);
+   WAY_FUNC(proxy_marshal);
+   WAY_FUNC(proxy_marshal_constructor);
+   WAY_FUNC(proxy_marshal_constructor_versioned);
+   WAY_FUNC(proxy_destroy);
+#undef WAY_FUNC
+}
+
+void
+WaylandLibWrapper::Unlink()
+{
+ if (mWaylandLib) {
+   PR_UnloadLibrary(mWaylandLib);
+ }
+ PodZero(this);
+}
diff --git a/widget/gtk/WaylandLibWrapper.h b/widget/gtk/WaylandLibWrapper.h
new file mode 100644
index 000000000000..34d6176e5527
--- /dev/null
+++ b/widget/gtk/WaylandLibWrapper.h
@@ -0,0 +1,60 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef __WaylandLibWrapper_h__
+#define __WaylandLibWrapper_h__
+
+#include "mozilla/Types.h"
+
+struct PRLibrary;
+
+struct WaylandLibWrapper
+{
+  WaylandLibWrapper();
+
+  // The libraries are not unloaded in the destructor,
+  // it would only run on shutdown anyway.
+  ~WaylandLibWrapper() = default;
+
+  struct wl_interface *registry_interface;
+  struct wl_interface *surface_interface;
+  struct wl_interface *subcompositor_interface;
+
+  int (*display_roundtrip_queue)(struct wl_display *display,
+      struct wl_event_queue *queue);
+  int (*display_roundtrip)(struct wl_display *display);
+  int (*proxy_add_listener)(struct wl_proxy *proxy,
+      void (**implementation)(void), void *data);
+  void (*proxy_marshal)(struct wl_proxy *p, uint32_t opcode, ...);
+  struct wl_proxy * (*proxy_marshal_constructor)(struct wl_proxy *proxy,
+      uint32_t opcode, const struct wl_interface *interface, ...);
+  struct wl_proxy * (*proxy_marshal_constructor_versioned)(struct wl_proxy *proxy,
+      uint32_t opcode, const struct wl_interface *interface, uint32_t version, ...);
+  void (*proxy_destroy)(struct wl_proxy *proxy);
+
+private:
+  // Reset the wrapper and unlink all attached libraries.
+  void Unlink();
+
+  PRLibrary* mWaylandLib;
+};
+
+extern struct WaylandLibWrapper MozWaylandWrapper;
+
+// Redefine our wrapped code
+#define wl_registry_interface       (MozWaylandWrapper.registry_interface)
+#define wl_surface_interface        (MozWaylandWrapper.surface_interface)
+#define wl_subcompositor_interface  (MozWaylandWrapper.subcompositor_interface)
+
+#define wl_display_roundtrip_queue  (MozWaylandWrapper.display_roundtrip_queue)
+#define wl_display_roundtrip        (MozWaylandWrapper.display_roundtrip)
+#define wl_proxy_add_listener       (MozWaylandWrapper.proxy_add_listener)
+#define wl_proxy_marshal            (MozWaylandWrapper.proxy_marshal)
+#define wl_proxy_marshal_constructor (MozWaylandWrapper.proxy_marshal_constructor)
+#define wl_proxy_marshal_constructor_versioned \
+                                    (MozWaylandWrapper.proxy_marshal_constructor_versioned)
+#define wl_proxy_destroy            (MozWaylandWrapper.proxy_destroy)
+
+#endif // WaylandLibWrapper
diff --git a/widget/gtk/WindowSurfaceWayland.cpp b/widget/gtk/WindowSurfaceWayland.cpp
index e143f5590c50..3605a2a166fd 100644
--- a/widget/gtk/WindowSurfaceWayland.cpp
+++ b/widget/gtk/WindowSurfaceWayland.cpp
@@ -35,6 +35,7 @@ GDK_WINDOWING_X11 - remove
 #include <assert.h>
 #include <poll.h>
 
+#include "WaylandLibWrapper.h"
 #include "WindowSurfaceWayland.h"
 
 #include "mozilla/gfx/2D.h"
diff --git a/widget/gtk/moz.build b/widget/gtk/moz.build
index 714e6a030b3a..1c9ac2ba3f8c 100644
--- a/widget/gtk/moz.build
+++ b/widget/gtk/moz.build
@@ -97,6 +97,7 @@ else:
     UNIFIED_SOURCES += [
         'gtk3drawing.cpp',
         'nsApplicationChooser.cpp',
+        'WaylandLibWrapper.cpp',
         'WidgetStyleCache.cpp',
     ]
 
-- 
2.11.0

