From 05e331bca5cd4c8b5c3363a2db8135eb51ee9f94 Mon Sep 17 00:00:00 2001
From: Martin Stransky <stransky@redhat.com>
Date: Tue, 28 Mar 2017 12:15:21 +0200
Subject: [PATCH 17/44] Link wayland run-time and provide fallback library when
 wayland is not present

Signed-off-by: Hiroshi Hatake <hatake@clear-code.com>
---
 browser/installer/package-manifest.in |   1 +
 toolkit/library/moz.build             |   1 +
 widget/gtk/WaylandLibWrapper.cpp      | 107 -------------
 widget/gtk/WaylandLibWrapper.h        |  59 --------
 widget/gtk/WindowSurfaceWayland.cpp   |   1 -
 widget/gtk/moz.build                  |   2 +-
 widget/gtk/mozcontainer.c             |  17 +--
 widget/gtk/mozwayland/moz.build       |  15 ++
 widget/gtk/mozwayland/mozwayland.c    | 272 ++++++++++++++++++++++++++++++++++
 9 files changed, 295 insertions(+), 180 deletions(-)
 delete mode 100644 widget/gtk/WaylandLibWrapper.cpp
 delete mode 100644 widget/gtk/WaylandLibWrapper.h
 create mode 100644 widget/gtk/mozwayland/moz.build
 create mode 100644 widget/gtk/mozwayland/mozwayland.c

diff --git a/browser/installer/package-manifest.in b/browser/installer/package-manifest.in
index 6e50017143fd..b67ceb70336d 100644
--- a/browser/installer/package-manifest.in
+++ b/browser/installer/package-manifest.in
@@ -107,6 +107,7 @@
 #ifdef MOZ_GTK3
 @BINPATH@/@DLL_PREFIX@mozgtk@DLL_SUFFIX@
 @BINPATH@/gtk2/@DLL_PREFIX@mozgtk@DLL_SUFFIX@
+@BINPATH@/@DLL_PREFIX@mozwayland@DLL_SUFFIX@
 #endif
 
 [browser]
diff --git a/toolkit/library/moz.build b/toolkit/library/moz.build
index a9bdf123dd32..f8caffdbf689 100644
--- a/toolkit/library/moz.build
+++ b/toolkit/library/moz.build
@@ -133,6 +133,7 @@ if CONFIG['USE_ICU']:
 if CONFIG['MOZ_WIDGET_TOOLKIT'] == 'gtk3':
     USE_LIBS += [
         'mozgtk_stub',
+        'mozwayland',
     ]
 
 if CONFIG['MOZ_JPROF']:
diff --git a/widget/gtk/WaylandLibWrapper.cpp b/widget/gtk/WaylandLibWrapper.cpp
deleted file mode 100644
index c615918d0c3b..000000000000
--- a/widget/gtk/WaylandLibWrapper.cpp
+++ /dev/null
@@ -1,107 +0,0 @@
-/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-#include "WaylandLibWrapper.h"
-#include "mozilla/PodOperations.h"
-#include "mozilla/Types.h"
-#include "prlink.h"
-#include  <gdk/gdk.h>
-
-struct WaylandLibWrapper MozWaylandWrapper;
-
-WaylandLibWrapper::WaylandLibWrapper()
-{
-#ifdef GDK_WINDOWING_WAYLAND
-    PRLibSpec lspec;
-    lspec.type = PR_LibSpec_Pathname;
-    lspec.value.pathname = "libwayland-client.so.0";
-    mWaylandLib = PR_LoadLibraryWithFlags(lspec, PR_LD_NOW | PR_LD_LOCAL);
-    if (!mWaylandLib) {
-        SetFallbackCalls();
-        return;
-    }
-
-#define WAY_FUNC(func)                                                       \
-    if (!(func = (decltype(func))PR_FindSymbol(mWaylandLib, "wl_"#func))) {  \
-        NS_WARNING("Couldn't load function " # func);                        \
-        PR_UnloadLibrary(mWaylandLib);                                       \
-        SetFallbackCalls();                                                  \
-        return;                                                              \
-    }                                                                        \
-
-    WAY_FUNC(registry_interface);
-    WAY_FUNC(surface_interface);
-    WAY_FUNC(subcompositor_interface);
-
-    WAY_FUNC(display_roundtrip_queue);
-    WAY_FUNC(display_roundtrip);
-    WAY_FUNC(proxy_add_listener);
-    WAY_FUNC(proxy_marshal);
-    WAY_FUNC(proxy_marshal_constructor);
-    WAY_FUNC(proxy_marshal_constructor_versioned);
-    WAY_FUNC(proxy_destroy);
-#undef WAY_FUNC
-#else // GDK_WINDOWING_WAYLAND
-    SetFallbackCalls();
-#endif
-}
-
-static int
-fallback_display_roundtrip_queue(struct wl_display *display,
-                                 struct wl_event_queue *queue)
-{
-    return -1;
-}
-static int
-fallback_display_roundtrip(struct wl_display *display)
-{
-    return -1;
-}
-static int
-fallback_proxy_add_listener(struct wl_proxy *proxy,
-                            void (**implementation)(void), void *data)
-{
-    return -1;
-}
-static void
-fallback_proxy_marshal(struct wl_proxy *p, uint32_t opcode, ...)
-{
-    return;
-}
-static struct wl_proxy *
-fallback_proxy_marshal_constructor(struct wl_proxy *proxy,
-                                   uint32_t opcode,
-                                   const struct wl_interface *interface, ...)
-{
-    return nullptr;
-}
-static struct wl_proxy *
-fallback_proxy_marshal_constructor_versioned(struct wl_proxy *proxy,
-    uint32_t opcode, const struct wl_interface *interface, uint32_t version, ...)
-{
-    return nullptr;
-}
-static void
-fallback_proxy_destroy(struct wl_proxy *proxy)
-{
-    return;
-}
-
-void
-WaylandLibWrapper::SetFallbackCalls()
-{
-#define WAY_FALLBACK(func)  \
-    func = fallback_##func;
-
-    // Set up fallback calls to avoid unexpected crashes
-    WAY_FALLBACK(display_roundtrip_queue);
-    WAY_FALLBACK(display_roundtrip);
-    WAY_FALLBACK(proxy_add_listener);
-    WAY_FALLBACK(proxy_marshal);
-    WAY_FALLBACK(proxy_marshal_constructor);
-    WAY_FALLBACK(proxy_marshal_constructor_versioned);
-    WAY_FALLBACK(proxy_destroy);
-#undef WAY_FALLBACK
-}
diff --git a/widget/gtk/WaylandLibWrapper.h b/widget/gtk/WaylandLibWrapper.h
deleted file mode 100644
index ea9052aa1343..000000000000
--- a/widget/gtk/WaylandLibWrapper.h
+++ /dev/null
@@ -1,59 +0,0 @@
-/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-#ifndef __WaylandLibWrapper_h__
-#define __WaylandLibWrapper_h__
-
-#include "mozilla/Types.h"
-
-struct PRLibrary;
-
-struct WaylandLibWrapper
-{
-  WaylandLibWrapper();
-
-  // The libraries are not unloaded in the destructor,
-  // it would only run on shutdown anyway.
-  ~WaylandLibWrapper() = default;
-
-  struct wl_interface *registry_interface;
-  struct wl_interface *surface_interface;
-  struct wl_interface *subcompositor_interface;
-
-  int (*display_roundtrip_queue)(struct wl_display *display,
-      struct wl_event_queue *queue);
-  int (*display_roundtrip)(struct wl_display *display);
-  int (*proxy_add_listener)(struct wl_proxy *proxy,
-      void (**implementation)(void), void *data);
-  void (*proxy_marshal)(struct wl_proxy *p, uint32_t opcode, ...);
-  struct wl_proxy * (*proxy_marshal_constructor)(struct wl_proxy *proxy,
-      uint32_t opcode, const struct wl_interface *interface, ...);
-  struct wl_proxy * (*proxy_marshal_constructor_versioned)(struct wl_proxy *proxy,
-      uint32_t opcode, const struct wl_interface *interface, uint32_t version, ...);
-  void (*proxy_destroy)(struct wl_proxy *proxy);
-
-private:
-  void SetFallbackCalls();
-
-  PRLibrary* mWaylandLib;
-};
-
-extern struct WaylandLibWrapper MozWaylandWrapper;
-
-// Redefine our wrapped code
-#define wl_registry_interface       (MozWaylandWrapper.registry_interface)
-#define wl_surface_interface        (MozWaylandWrapper.surface_interface)
-#define wl_subcompositor_interface  (MozWaylandWrapper.subcompositor_interface)
-
-#define wl_display_roundtrip_queue  (MozWaylandWrapper.display_roundtrip_queue)
-#define wl_display_roundtrip        (MozWaylandWrapper.display_roundtrip)
-#define wl_proxy_add_listener       (MozWaylandWrapper.proxy_add_listener)
-#define wl_proxy_marshal            (MozWaylandWrapper.proxy_marshal)
-#define wl_proxy_marshal_constructor (MozWaylandWrapper.proxy_marshal_constructor)
-#define wl_proxy_marshal_constructor_versioned \
-                                    (MozWaylandWrapper.proxy_marshal_constructor_versioned)
-#define wl_proxy_destroy            (MozWaylandWrapper.proxy_destroy)
-
-#endif // WaylandLibWrapper
diff --git a/widget/gtk/WindowSurfaceWayland.cpp b/widget/gtk/WindowSurfaceWayland.cpp
index dab84b8349bb..6255fe07412f 100644
--- a/widget/gtk/WindowSurfaceWayland.cpp
+++ b/widget/gtk/WindowSurfaceWayland.cpp
@@ -36,7 +36,6 @@ GDK_WINDOWING_X11 - remove
 #include <assert.h>
 #include <poll.h>
 
-#include "WaylandLibWrapper.h"
 #include "WindowSurfaceWayland.h"
 
 #include "mozilla/gfx/2D.h"
diff --git a/widget/gtk/moz.build b/widget/gtk/moz.build
index 1c9ac2ba3f8c..22033066d274 100644
--- a/widget/gtk/moz.build
+++ b/widget/gtk/moz.build
@@ -6,6 +6,7 @@
 
 if CONFIG['MOZ_WIDGET_TOOLKIT'] == 'gtk3':
     DIRS += ['mozgtk']
+    DIRS += ['mozwayland']
 
 EXPORTS += [
     'mozcontainer.h',
@@ -97,7 +98,6 @@ else:
     UNIFIED_SOURCES += [
         'gtk3drawing.cpp',
         'nsApplicationChooser.cpp',
-        'WaylandLibWrapper.cpp',
         'WidgetStyleCache.cpp',
     ]
 
diff --git a/widget/gtk/mozcontainer.c b/widget/gtk/mozcontainer.c
index 5d4683622d2f..7704b5d2b351 100644
--- a/widget/gtk/mozcontainer.c
+++ b/widget/gtk/mozcontainer.c
@@ -8,6 +8,7 @@
 #include "mozcontainer.h"
 #include <gtk/gtk.h>
 #ifdef GDK_WINDOWING_WAYLAND
+#include <gdk/gdkx.h>
 #include <gdk/gdkwayland.h>
 #endif
 
@@ -204,16 +205,17 @@ moz_container_unmap_surface(MozContainer *container)
 static void
 moz_container_create_surface(MozContainer *container)
 {
+    GdkDisplay *display = gtk_widget_get_display(GTK_WIDGET(container));
+    if (GDK_IS_X11_DISPLAY(display))
+        return;
+
     if (!mQueue) {
-      GdkDisplay *display = gtk_widget_get_display(GTK_WIDGET(container));
       mQueue = wl_display_create_queue(gdk_wayland_display_get_wl_display(display));
     }
 
     if (!container->surface) {
-        GdkDisplay *display;
         struct wl_compositor *compositor;
 
-        display = gtk_widget_get_display(GTK_WIDGET (container));
         compositor = gdk_wayland_display_get_wl_compositor(display);
         container->surface = wl_compositor_create_surface(compositor);
         wl_proxy_set_queue((struct wl_proxy *)container->surface, mQueue);
@@ -375,15 +377,6 @@ moz_container_realize (GtkWidget *widget)
         attributes.wclass = GDK_INPUT_OUTPUT;
         attributes.visual = gtk_widget_get_visual (widget);
         attributes.window_type = GDK_WINDOW_CHILD;
-#if defined(GDK_WINDOWING_WAYLAND)
-/*
-        parent_widget = gtk_widget_get_parent(widget);
-        if (parent_widget &&
-            gtk_window_get_window_type(GTK_WINDOW(parent_widget)) == GTK_WINDOW_POPUP) {
-            attributes.window_type = GDK_WINDOW_SUBSURFACE;
-        }
-*/
-#endif
 
 #if (MOZ_WIDGET_GTK == 2)
         attributes.colormap = gtk_widget_get_colormap (widget);
diff --git a/widget/gtk/mozwayland/moz.build b/widget/gtk/mozwayland/moz.build
new file mode 100644
index 000000000000..cc2736889589
--- /dev/null
+++ b/widget/gtk/mozwayland/moz.build
@@ -0,0 +1,15 @@
+# -*- Mode: python; indent-tabs-mode: nil; tab-width: 40 -*-
+# vim: set filetype=python:
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+SOURCES += [
+    'mozwayland.c',
+]
+
+SharedLibrary('mozwayland')
+
+SONAME = 'mozwayland'
+
+CFLAGS += CONFIG['TK_CFLAGS']
diff --git a/widget/gtk/mozwayland/mozwayland.c b/widget/gtk/mozwayland/mozwayland.c
new file mode 100644
index 000000000000..34f0c62b9e55
--- /dev/null
+++ b/widget/gtk/mozwayland/mozwayland.c
@@ -0,0 +1,272 @@
+/* -*- Mode: C; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
+/* vim:expandtab:shiftwidth=4:tabstop=4:
+ */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "mozilla/Types.h"
+#include <gtk/gtk.h>
+
+#ifdef GDK_WINDOWING_WAYLAND
+#include <gdk/gdkwayland.h>
+
+const struct wl_interface wl_buffer_interface;
+const struct wl_interface wl_callback_interface;
+const struct wl_interface wl_region_interface;
+const struct wl_interface wl_registry_interface;
+const struct wl_interface wl_shm_interface;
+const struct wl_interface wl_shm_pool_interface;
+const struct wl_interface wl_surface_interface;
+const struct wl_interface wl_subsurface_interface;
+const struct wl_interface wl_subcompositor_interface;
+
+MOZ_EXPORT void
+wl_event_queue_destroy(struct wl_event_queue *queue)
+{
+}
+
+MOZ_EXPORT void
+wl_proxy_marshal(struct wl_proxy *p, uint32_t opcode, ...)
+{
+}
+
+MOZ_EXPORT void
+wl_proxy_marshal_array(struct wl_proxy *p, uint32_t opcode,
+		       union wl_argument *args)
+{
+}
+
+MOZ_EXPORT struct wl_proxy *
+wl_proxy_create(struct wl_proxy *factory,
+		const struct wl_interface *interface)
+{
+    return NULL;
+}
+
+MOZ_EXPORT void *
+wl_proxy_create_wrapper(void *proxy)
+{
+    return NULL;
+}
+
+MOZ_EXPORT void
+wl_proxy_wrapper_destroy(void *proxy_wrapper)
+{
+}
+
+MOZ_EXPORT struct wl_proxy *
+wl_proxy_marshal_constructor(struct wl_proxy *proxy,
+			     uint32_t opcode,
+			     const struct wl_interface *interface,
+			     ...)
+{
+   return NULL;
+}
+
+MOZ_EXPORT struct wl_proxy *
+wl_proxy_marshal_constructor_versioned(struct wl_proxy *proxy,
+				       uint32_t opcode,
+				       const struct wl_interface *interface,
+				       uint32_t version,
+				       ...)
+{
+   return NULL;
+}
+
+MOZ_EXPORT struct wl_proxy *
+wl_proxy_marshal_array_constructor(struct wl_proxy *proxy,
+				   uint32_t opcode, union wl_argument *args,
+				   const struct wl_interface *interface)
+{
+   return NULL;
+}
+
+MOZ_EXPORT struct wl_proxy *
+wl_proxy_marshal_array_constructor_versioned(struct wl_proxy *proxy,
+					     uint32_t opcode,
+					     union wl_argument *args,
+					     const struct wl_interface *interface,
+					     uint32_t version)
+{
+  return NULL;
+}
+
+MOZ_EXPORT void
+wl_proxy_destroy(struct wl_proxy *proxy)
+{
+}
+
+MOZ_EXPORT int
+wl_proxy_add_listener(struct wl_proxy *proxy,
+		      void (**implementation)(void), void *data)
+{
+   return -1;
+}
+
+MOZ_EXPORT const void *
+wl_proxy_get_listener(struct wl_proxy *proxy)
+{
+   return NULL;
+}
+
+MOZ_EXPORT int
+wl_proxy_add_dispatcher(struct wl_proxy *proxy,
+			wl_dispatcher_func_t dispatcher_func,
+			const void * dispatcher_data, void *data)
+{
+   return -1;
+}
+
+MOZ_EXPORT void
+wl_proxy_set_user_data(struct wl_proxy *proxy, void *user_data)
+{
+}
+
+MOZ_EXPORT void *
+wl_proxy_get_user_data(struct wl_proxy *proxy)
+{
+   return NULL;
+}
+
+MOZ_EXPORT uint32_t
+wl_proxy_get_version(struct wl_proxy *proxy)
+{
+   return -1;
+}
+
+MOZ_EXPORT uint32_t
+wl_proxy_get_id(struct wl_proxy *proxy)
+{
+   return -1;
+}
+
+MOZ_EXPORT const char *
+wl_proxy_get_class(struct wl_proxy *proxy)
+{
+   return NULL;
+}
+
+MOZ_EXPORT void
+wl_proxy_set_queue(struct wl_proxy *proxy, struct wl_event_queue *queue)
+{
+}
+
+MOZ_EXPORT struct wl_display *
+wl_display_connect(const char *name)
+{
+   return NULL;
+}
+
+MOZ_EXPORT struct wl_display *
+wl_display_connect_to_fd(int fd)
+{
+   return NULL;
+}
+
+MOZ_EXPORT void
+wl_display_disconnect(struct wl_display *display)
+{
+}
+
+MOZ_EXPORT int
+wl_display_get_fd(struct wl_display *display)
+{
+   return -1;
+}
+
+MOZ_EXPORT int
+wl_display_dispatch(struct wl_display *display)
+{
+   return -1;
+}
+
+MOZ_EXPORT int
+wl_display_dispatch_queue(struct wl_display *display,
+			  struct wl_event_queue *queue)
+{
+   return -1;
+}
+
+MOZ_EXPORT int
+wl_display_dispatch_queue_pending(struct wl_display *display,
+				  struct wl_event_queue *queue)
+{
+   return -1;
+}
+
+MOZ_EXPORT int
+wl_display_dispatch_pending(struct wl_display *display)
+{
+   return -1;
+}
+
+MOZ_EXPORT int
+wl_display_get_error(struct wl_display *display)
+{
+   return -1;
+}
+
+MOZ_EXPORT uint32_t
+wl_display_get_protocol_error(struct wl_display *display,
+			      const struct wl_interface **interface,
+			      uint32_t *id)
+{
+   return -1;
+}
+
+MOZ_EXPORT int
+wl_display_flush(struct wl_display *display)
+{
+   return -1;
+}
+
+MOZ_EXPORT int
+wl_display_roundtrip_queue(struct wl_display *display,
+			   struct wl_event_queue *queue)
+{
+  return -1;
+}
+
+MOZ_EXPORT int
+wl_display_roundtrip(struct wl_display *display)
+{
+   return -1;
+}
+
+MOZ_EXPORT struct wl_event_queue *
+wl_display_create_queue(struct wl_display *display)
+{
+   return NULL;
+}
+
+MOZ_EXPORT int
+wl_display_prepare_read_queue(struct wl_display *display,
+			      struct wl_event_queue *queue)
+{
+   return -1;
+}
+
+MOZ_EXPORT int
+wl_display_prepare_read(struct wl_display *display)
+{
+   return -1;
+}
+
+MOZ_EXPORT void
+wl_display_cancel_read(struct wl_display *display)
+{
+}
+
+MOZ_EXPORT int
+wl_display_read_events(struct wl_display *display)
+{
+   return -1;
+}
+
+MOZ_EXPORT void
+wl_log_set_handler_client(wl_log_func_t handler)
+{
+}
+
+#endif // GDK_WINDOWING_WAYLAND
-- 
2.11.0

