From a07fa6d5e29c9785326fc5b26ec65a8128ffb61f Mon Sep 17 00:00:00 2001
From: Takuro Ashie <ashie@homa.ne.jp>
Date: Thu, 16 Jun 2016 11:04:11 +0900
Subject: [PATCH 09/10] Use wl_egl_window as a native EGL window on Wayland

Note that it doesn't work correctly yet. Although it can enable
CompositorOGL, it breaks window handling. I'll replace the path
with a proper one later.

Signed-off-by: Takuro Ashie <ashie@homa.ne.jp>
---
 config/system-headers            |  2 ++
 gfx/gl/GLContextProviderEGL.cpp  |  2 +-
 toolkit/library/moz.build        |  2 ++
 widget/gtk/mozgtk/gtk3/moz.build |  2 ++
 widget/gtk/mozgtk/mozgtk.c       |  2 ++
 widget/gtk/nsWindow.cpp          | 39 +++++++++++++++++++++++++++++++++++++++
 widget/gtk/nsWindow.h            |  7 +++++++
 widget/nsIWidget.h               |  1 +
 8 files changed, 56 insertions(+), 1 deletion(-)

diff --git a/config/system-headers b/config/system-headers
index 84c04e0..ab99474 100644
--- a/config/system-headers
+++ b/config/system-headers
@@ -1206,6 +1206,8 @@ View.h
 Volume.h
 wab.h
 wait.h
+wayland-client.h
+wayland-egl.h
 wchar.h
 wctype.h
 winbase.h
diff --git a/gfx/gl/GLContextProviderEGL.cpp b/gfx/gl/GLContextProviderEGL.cpp
index ee982e2..050f89a 100644
--- a/gfx/gl/GLContextProviderEGL.cpp
+++ b/gfx/gl/GLContextProviderEGL.cpp
@@ -6,7 +6,7 @@
 #if defined(MOZ_WIDGET_GTK)
     #include <gdk/gdkx.h>
     // we're using default display for now
-    #define GET_NATIVE_WINDOW(aWidget) ((EGLNativeWindowType)GDK_WINDOW_XID((GdkWindow*)aWidget->GetNativeData(NS_NATIVE_WINDOW)))
+    #define GET_NATIVE_WINDOW(aWidget) ((EGLNativeWindowType)aWidget->GetNativeData(NS_NATIVE_EGL_WINDOW))
 #elif defined(MOZ_WIDGET_QT)
     #define GET_NATIVE_WINDOW(aWidget) ((EGLNativeWindowType)aWidget->GetNativeData(NS_NATIVE_SHAREABLE_WINDOW))
 #else
diff --git a/toolkit/library/moz.build b/toolkit/library/moz.build
index 03d81c4..58c6a2b 100644
--- a/toolkit/library/moz.build
+++ b/toolkit/library/moz.build
@@ -302,6 +302,8 @@ if CONFIG['MOZ_WIDGET_GTK']:
     OS_LIBS += CONFIG['XT_LIBS']
     OS_LIBS += [
         'gthread-2.0',
+        'wayland-client',
+        'wayland-egl',
     ]
 
 if CONFIG['MOZ_WIDGET_TOOLKIT'] == 'qt':
diff --git a/widget/gtk/mozgtk/gtk3/moz.build b/widget/gtk/mozgtk/gtk3/moz.build
index 81c4cea..58f8722 100644
--- a/widget/gtk/mozgtk/gtk3/moz.build
+++ b/widget/gtk/mozgtk/gtk3/moz.build
@@ -32,6 +32,8 @@ else:
 OS_LIBS += [f for f in CONFIG['MOZ_GTK3_LIBS'] if f.startswith('-L')]
 OS_LIBS += no_as_needed
 OS_LIBS += [
+    'wayland-client',
+    'wayland-egl',
     'gtk-3',
     'gdk-3',
 ]
diff --git a/widget/gtk/mozgtk/mozgtk.c b/widget/gtk/mozgtk/mozgtk.c
index 3ed0f50..15a97e5 100644
--- a/widget/gtk/mozgtk/mozgtk.c
+++ b/widget/gtk/mozgtk/mozgtk.c
@@ -583,6 +583,8 @@ STUB(gtk_drawing_area_new)
 STUB(gdk_window_set_transient_for)
 STUB(gdk_wayland_display_get_type)
 STUB(gdk_wayland_display_get_wl_display)
+STUB(gdk_wayland_window_get_type)
+STUB(gdk_wayland_window_get_wl_surface)
 #endif
 
 #ifdef GTK2_SYMBOLS
diff --git a/widget/gtk/nsWindow.cpp b/widget/gtk/nsWindow.cpp
index 21efb78..08c69ef 100644
--- a/widget/gtk/nsWindow.cpp
+++ b/widget/gtk/nsWindow.cpp
@@ -438,6 +438,9 @@ nsWindow::nsWindow()
 
     mContainer           = nullptr;
     mGdkWindow           = nullptr;
+#ifdef GDK_WINDOWING_WAYLAND
+    mWlEglWindow         = nullptr;
+#endif
     mShell               = nullptr;
     mPluginNativeWindow  = nullptr;
     mHasMappedToplevel   = false;
@@ -765,6 +768,12 @@ nsWindow::Destroy(void)
 #endif /* MOZ_X11 && MOZ_WIDGET_GTK2 */
 
     GtkWidget *owningWidget = GetMozContainerWidget();
+#ifdef GDK_WINDOWING_WAYLAND
+    if (mWlEglWindow) {
+        wl_egl_window_destroy(mWlEglWindow);
+        mWlEglWindow = nullptr;
+    }
+#endif
     if (mShell) {
         gtk_widget_destroy(mShell);
         mShell = nullptr;
@@ -1766,6 +1775,36 @@ nsWindow::GetNativeData(uint32_t aDataType)
             return this;
         }
         return mIMContext.get();
+    case NS_NATIVE_EGL_WINDOW:
+    {
+        if (!mGdkWindow)
+            return nullptr;
+
+#ifdef MOZ_X11
+        if (mIsX11Display)
+            return (void*)GDK_WINDOW_XID(mGdkWindow);
+#endif
+
+#ifdef GDK_WINDOWING_WAYLAND
+        if (GDK_IS_WAYLAND_WINDOW(mGdkWindow)) {
+            if (mWlEglWindow)
+                return mWlEglWindow;
+
+            struct wl_surface *wlsurf =
+                gdk_wayland_window_get_wl_surface(mGdkWindow);
+            if (!wlsurf)
+                return nullptr;
+
+            mWlEglWindow =
+                wl_egl_window_create(wlsurf,
+                                     gdk_window_get_width(mGdkWindow),
+                                     gdk_window_get_height(mGdkWindow));
+            return mWlEglWindow;
+        }
+#endif
+
+        return nullptr;
+    }
     default:
         NS_WARNING("nsWindow::GetNativeData called with bad value");
         return nullptr;
diff --git a/widget/gtk/nsWindow.h b/widget/gtk/nsWindow.h
index fdeae91..223917c 100644
--- a/widget/gtk/nsWindow.h
+++ b/widget/gtk/nsWindow.h
@@ -26,6 +26,10 @@
 #ifdef MOZ_X11
 #include <gdk/gdkx.h>
 #endif /* MOZ_X11 */
+#ifdef GDK_WINDOWING_WAYLAND
+#include <gdk/gdkwayland.h>
+#include <wayland-egl.h>
+#endif /* GDK_WINDOWING_WAYLAND */
 
 #ifdef ACCESSIBILITY
 #include "mozilla/a11y/Accessible.h"
@@ -416,6 +420,9 @@ private:
     GtkWidget          *mShell;
     MozContainer       *mContainer;
     GdkWindow          *mGdkWindow;
+#ifdef GDK_WINDOWING_WAYLAND
+    struct wl_egl_window *mWlEglWindow;
+#endif
 
     uint32_t            mHasMappedToplevel : 1,
                         mIsFullyObscured : 1,
diff --git a/widget/nsIWidget.h b/widget/nsIWidget.h
index b350823..2249ece 100644
--- a/widget/nsIWidget.h
+++ b/widget/nsIWidget.h
@@ -127,6 +127,7 @@ typedef void* nsNativeWidget;
 #if defined(MOZ_WIDGET_GTK)
 // set/get nsPluginNativeWindowGtk, e10s specific
 #define NS_NATIVE_PLUGIN_OBJECT_PTR    104
+#define NS_NATIVE_EGL_WINDOW           105
 #endif
 
 #define NS_IWIDGET_IID \
-- 
1.9.1

